{"version":3,"sources":["TicTacGame/Board.js","TicTacGame/TicTacGame.js","index.js"],"names":["Board","this","renderBoard","i","Square","value","props","squares","onClick","row","rows","dimension","push","renderSquare","className","board","renderRow","React","Component","TicTacGame","state","tempDimension","history","stepNumber","xIsNext","lines","Array","fill","newLines","currentLines","calculateRows","forEach","line","calculateCols","calculateDiags","status","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","type","min","max","onChange","event","handleDimensionChange","handleSubmit","clickSquare","slice","length","setState","concat","compareLine","a","allMatch","undefined","j","col","diag_tl_br","diag_tr_bl","calculateWinConditions","val","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a20a10f.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n\r\n/**\r\n * Board Component\r\n */\r\nexport default class Board extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          {this.renderBoard()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  renderSquare(i) {\r\n      return (\r\n      <Square \r\n      key={i}\r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n      />\r\n      );\r\n  }\r\n\r\n  renderRow(row){\r\n      let rows = [];\r\n      for (let i = 0; i < this.props.dimension; i++) {\r\n          rows.push(this.renderSquare(i + (row * this.props.dimension)));\r\n      }\r\n\r\n      return (\r\n      <div key={\"board-row-\" + row}className=\"board-row\">\r\n          {rows}\r\n      </div>\r\n      )\r\n  }\r\n\r\n  renderBoard(){\r\n      let board = [];\r\n      for(let i = 0; i < this.props.dimension; i++){\r\n        board.push(this.renderRow(i));\r\n      }\r\n\r\n      return (\r\n        <div className=\"game-board\">\r\n          {board}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\n/**\r\n * Square component (replaced by Square function)\r\n */\r\nexport class SquareComponent extends React.Component {\r\n    render() {\r\n      return (\r\n        <button \r\n          className=\"square\" \r\n          onClick={() => this.clickSquare()}\r\n        >\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  \r\n    clickSquare(){\r\n      this.props.onClick();\r\n    }\r\n  }\r\n\r\n/**\r\n * Returns a square element\r\n * @param {*} props \r\n */\r\nexport function Square(props){\r\n    return(\r\n        <button className=\"square\" onClick={props.onClick}>\r\n          <div className=\"content\">\r\n            {props.value}\r\n          </div>\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport './Board.css';\r\n\r\nimport Board from \"./Board\"\r\n\r\nexport default class TicTacGame extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        dimension: 3,\r\n        tempDimension: 3,\r\n        history: [{\r\n          squares: []\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n        lines: [],\r\n      }\r\n  \r\n      this.state.history.squares = Array(this.state.dimension * this.state.dimension).fill(null);\r\n  \r\n      let newLines = [];\r\n      let currentLines = this.calculateRows();\r\n      currentLines.forEach(line => {\r\n        newLines.push(line);\r\n      });\r\n      currentLines = this.calculateCols();\r\n      currentLines.forEach(line => {\r\n        newLines.push(line);\r\n      });\r\n      currentLines = this.calculateDiags();\r\n      currentLines.forEach(line => {\r\n        newLines.push(line);\r\n      });\r\n      this.state.lines = newLines;\r\n  \r\n    }\r\n  \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = this.calculateWinner(current.squares);\r\n  \r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n      if(winner){\r\n        status = \"Winner: \" + winner;\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n  \r\n      return (\r\n        <div className=\"game\">\r\n            <header>\r\n                <h1>Reactic Tac Toe</h1>\r\n                <section className=\"setting dimension\">\r\n                    <span className=\"description\">\r\n                        Size (3- 10)\r\n                    </span>\r\n                    <input className=\"board-size-input\" type=\"number\" min=\"3\" max=\"10\" onChange={event => this.handleDimensionChange(event)}></input>\r\n                    <button onClick={() => this.handleSubmit()}>Change</button>\r\n                </section>\r\n            </header>\r\n            <br></br>\r\n            <main className=\"game-area\">\r\n                <Board \r\n                squares={current.squares}\r\n                dimension={this.state.dimension}\r\n                onClick={(i) => this.clickSquare(i)}\r\n                />\r\n            </main>\r\n            <section className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </section>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    clickSquare(i){\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if(this.calculateWinner(squares) || squares[i]){\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? \"X\": \"O\";\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n        }]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n  \r\n    jumpTo(step){\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n  \r\n    calculateWinner(squares) {\r\n      /* Example 3x3 victory lines\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      */\r\n  \r\n      for (let i = 0; i < this.state.lines.length; i++) {\r\n        const line = this.state.lines[i];\r\n        \r\n        if(this.compareLine(squares, line) === true){\r\n          return squares[line[0]];\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    }\r\n  \r\n    compareLine(squares, line){\r\n      const a = squares[line[0]];\r\n      let allMatch = true;\r\n      for(let i = 1; i < line.length; i++){\r\n        if(a === undefined || squares[line[i]] === undefined || a !== squares[line[i]]){\r\n          allMatch = false;\r\n        }\r\n      }\r\n  \r\n      return allMatch;\r\n    }\r\n\r\n    calculateWinConditions(){\r\n      let newLines = [];\r\n      let currentLines = this.calculateRows();\r\n      currentLines.forEach(line => {\r\n        newLines.push(line);\r\n      });\r\n      currentLines = this.calculateCols();\r\n      currentLines.forEach(line => {\r\n        newLines.push(line);\r\n      });\r\n      currentLines = this.calculateDiags();\r\n      currentLines.forEach(line => {\r\n        newLines.push(line);\r\n      });\r\n      this.setState({\r\n        lines: newLines\r\n      });\r\n    }\r\n  \r\n    calculateRows(){\r\n      let lines = [];\r\n      const dimension = this.state.dimension;\r\n  \r\n      for(let i = 0; i < dimension; i++){\r\n        let row = [];\r\n        for(let j = 0; j < dimension; j++){\r\n          row.push((i * dimension) + j);\r\n        }\r\n        \r\n        lines.push(row);\r\n      }\r\n  \r\n      return lines;\r\n    }\r\n  \r\n    calculateCols(){\r\n      let lines = [];\r\n      const dimension = this.state.dimension;\r\n  \r\n      for(let i = 0; i < dimension; i++){\r\n        let col = [];\r\n        for(let j = 0; j < dimension; j++){\r\n          col.push(i + (j * dimension));\r\n        }\r\n  \r\n        lines.push(col);\r\n  \r\n      }\r\n  \r\n      return lines;\r\n    }\r\n  \r\n    calculateDiags(){\r\n      let lines = [];\r\n      //top left - bottom right\r\n      let diag_tl_br = [];\r\n  \r\n      //top right - bottom left\r\n      let diag_tr_bl = [];\r\n      const dimension = this.state.dimension;\r\n  \r\n      for(let i = 0; i < dimension; i++){\r\n        diag_tl_br.push((i * dimension) + i);\r\n        diag_tr_bl.push(((i + 1) * dimension) - (i + 1));\r\n      }\r\n  \r\n      lines.push(diag_tl_br);\r\n      lines.push(diag_tr_bl);\r\n  \r\n      return lines;\r\n     \r\n    }\r\n\r\n    handleSubmit(event){\r\n      this.setState({ dimension: this.state.tempDimension }, function () {\r\n        this.calculateWinConditions();\r\n        this.jumpTo(0);\r\n      });\r\n      \r\n\r\n    }\r\n\r\n    handleDimensionChange(event){\r\n      let val = 3;\r\n      if(event.target.value > 3 && event.target.value <= 10){\r\n        val = event.target.value;\r\n      } else if(event.target.value > 10){\r\n        val = 10;\r\n      }\r\n      this.setState({\r\n        tempDimension: val\r\n      });\r\n        \r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TicTacGame from './TicTacGame/TicTacGame';\n\nReactDOM.render(\n  <TicTacGame />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}